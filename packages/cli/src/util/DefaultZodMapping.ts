import { OID } from "@postgresql-typed/oids";

export const DefaultZodMapping = new Map<OID, string | [string, string[]]>([
	[OID._bool, "z.array(z.boolean())"],
	[OID._bpchar, "z.array(z.string())"],
	[OID._bytea, "z.array(z.instanceof(Buffer))"],
	[OID._cidr, "z.array(z.string())"],
	[OID._circle, ["z.array(z.preprocess((val) => Circle.from(val as string).toString(), z.string()))", ['import { Circle } from "postgresql-typed";']]],
	[OID._date, ["z.array(z.preprocess((val) => Date.from(val as string).toString(), z.string()))", ['import { Date } from "postgresql-typed";']]],
	[OID._float4, "z.array(z.number())"],
	[OID._float8, "z.array(z.number())"],
	[OID._inet, "z.array(z.string())"],
	[OID._int2, "z.array(z.number())"],
	[OID._int4, "z.array(z.number())"],
	[OID._int8, "z.array(z.number())"],
	[OID._interval, ["z.array(z.preprocess((val) => Interval.from(val as string).toString(), z.string()))", ['import { Interval } from "postgresql-typed";']]],
	[OID._json, ["z.array(zJson)", ['import { zJson } from "postgresql-types-generator";']]],
	[OID._jsonb, ["z.array(zJson)", ['import { zJson } from "postgresql-types-generator";']]],
	[OID._macaddr, "z.array(z.string())"],
	[OID._money, "z.array(z.string())"],
	[OID._numeric, "z.array(z.number())"],
	[OID._numrange, "z.array(z.string())"],
	[OID._oid, "z.array(z.number())"],
	[OID._point, ["z.array(z.preprocess((val) => Point.from(val as string).toString(), z.string()))", ['import { Point } from "postgresql-typed";']]],
	[OID._regproc, "z.array(z.string())"],
	[OID._text, "z.array(z.string())"],
	[OID._time, ["z.array(z.preprocess((val) => Time.from(val as string).toString(), z.string()))", ['import { Time } from "postgresql-typed";']]],
	[OID._timestamp, ["z.array(z.preprocess((val) => Timestamp.from(val as string).toString(), z.string()))", ['import { Timestamp } from "postgresql-typed";']]],
	[
		OID._timestamptz,
		["z.array(z.preprocess((val) => TimestampTZ.from(val as string).toString(), z.string()))", ['import { TimestampTZ } from "postgresql-typed";']],
	],
	[OID._timetz, "z.array(z.string())"],
	[OID._uuid, "z.array(z.string())"],
	[OID._varchar, "z.array(z.string())"],
	[OID.bool, "z.boolean()"],
	[OID.bytea, "z.instanceof(Buffer)"],
	[OID.circle, ["z.preprocess((val) => Circle.from(val as string).toString(), z.string())", ['import { Circle } from "postgresql-typed";']]],
	[OID.date, ["z.preprocess((val) => Date.from(val as string).toString(), z.string())", ['import { Date } from "postgresql-typed";']]],
	[OID.float4, "z.number()"],
	[OID.float8, "z.number()"],
	[OID.int2, "z.number()"],
	[OID.int4, "z.number()"],
	[OID.int8, "z.number()"],
	[OID.interval, ["z.preprocess((val) => Interval.from(val as string).toString(), z.string())", ['import { Interval } from "postgresql-typed";']]],
	[OID.json, ["zJson", ['import { zJson } from "postgresql-types-generator/lib/util/zJson";']]],
	[OID.jsonb, ["zJson", ['import { zJson } from "postgresql-types-generator/lib/util/zJson";']]],
	[OID.oid, "z.number()"],
	[OID.point, ["z.preprocess((val) => Point.from(val as string).toString(), z.string())", ['import { Point } from "postgresql-typed";']]],
	[OID.timestamp, ["z.preprocess((val) => Timestamp.from(val as string).toString(), z.string())", ['import { Timestamp } from "postgresql-typed";']]],
	[OID.timestamptz, ["z.preprocess((val) => TimestampTZ.from(val as string).toString(), z.string())", ['import { TimestampTZ } from "postgresql-typed";']]],
]);
