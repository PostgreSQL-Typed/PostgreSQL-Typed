/* eslint-disable unicorn/no-null */
import { OID } from "@postgresql-typed/oids";
import {
	arrayParser,
	Bit,
	BitVarying,
	Boolean,
	Box,
	Character,
	CharacterVarying,
	Circle,
	Date,
	DateMultiRange,
	DateRange,
	Float4,
	Float8,
	Int2,
	Int4,
	Int4MultiRange,
	Int4Range,
	Int8,
	Int8MultiRange,
	Int8Range,
	Interval,
	Line,
	LineSegment,
	Money,
	Name,
	OID as OIDClass,
	parser,
	Path,
	Point,
	Polygon,
	Text,
	Time,
	Timestamp,
	TimestampMultiRange,
	TimestampRange,
	TimestampTZ,
	TimestampTZMultiRange,
	TimestampTZRange,
	TimeTZ,
	UUID,
} from "@postgresql-typed/parsers";
import type postgres from "postgres";

export const types: Record<string, postgres.PostgresType<any>> = {
	bit: {
		to: OID.bit,
		from: [OID.bit],
		serialize: (value: string | null) => parser<Bit<1>>(Bit)(value)?.value ?? null,
		parse: (value: string | null) => parser<Bit<1>>(Bit)(value),
	},
	_bit: {
		to: OID._bit,
		from: [OID._bit],
		serialize: (value: string | null) => (value === null ? null : JSON.stringify(arrayParser<Bit<1>>(Bit, ",")(value)?.map(v => v.value))),
		parse: (value: string | null) => arrayParser<Bit<1>>(Bit, ",")(value),
	},
	varbit: {
		to: OID.varbit,
		from: [OID.varbit],
		serialize: (value: string | null) => parser<BitVarying<number>>(BitVarying)(value)?.value ?? null,
		parse: (value: string | null) => parser<BitVarying<number>>(BitVarying)(value),
	},
	_varbit: {
		to: OID._varbit,
		from: [OID._varbit],
		serialize: (value: string | null) => (value === null ? null : JSON.stringify(arrayParser<BitVarying<number>>(BitVarying, ",")(value)?.map(v => v.value))),
		parse: (value: string | null) => arrayParser<BitVarying<number>>(BitVarying, ",")(value),
	},
	bool: {
		to: OID.bool,
		from: [OID.bool],
		// eslint-disable-next-line @typescript-eslint/ban-types
		serialize: (value: string | null) => parser<Boolean>(Boolean)(value)?.value ?? null,
		// eslint-disable-next-line @typescript-eslint/ban-types
		parse: (value: string | null) => parser<Boolean>(Boolean)(value),
	},
	_bool: {
		to: OID._bool,
		from: [OID._bool],
		// eslint-disable-next-line @typescript-eslint/ban-types
		serialize: (value: string | null) => (value === null ? null : JSON.stringify(arrayParser<Boolean>(Boolean, ",")(value)?.map(v => v.value))),
		// eslint-disable-next-line @typescript-eslint/ban-types
		parse: (value: string | null) => arrayParser<Boolean>(Boolean, ",")(value),
	},
	char: {
		to: OID.char,
		from: [OID.char],
		serialize: (value: string | null) => parser<Character<1>>(Character)(value)?.value ?? null,
		parse: (value: string | null) => parser<Character<1>>(Character)(value),
	},
	_char: {
		to: OID._char,
		from: [OID._char],
		serialize: (value: string | null) => (value === null ? null : JSON.stringify(arrayParser<Character<1>>(Character, ",")(value)?.map(v => v.value))),
		parse: (value: string | null) => arrayParser<Character<1>>(Character, ",")(value),
	},
	bpchar: {
		to: OID.bpchar,
		from: [OID.bpchar],
		serialize: (value: string | null) => parser<Character<1>>(Character)(value)?.value ?? null,
		parse: (value: string | null) => parser<Character<1>>(Character)(value),
	},
	_bpchar: {
		to: OID._bpchar,
		from: [OID._bpchar],
		serialize: (value: string | null) => (value === null ? null : JSON.stringify(arrayParser<Character<1>>(Character, ",")(value)?.map(v => v.value))),
		parse: (value: string | null) => arrayParser<Character<1>>(Character, ",")(value),
	},
	varchar: {
		to: OID.varchar,
		from: [OID.varchar],
		serialize: (value: string | null) => parser<CharacterVarying<number>>(CharacterVarying)(value)?.value ?? null,
		parse: (value: string | null) => parser<CharacterVarying<number>>(CharacterVarying)(value),
	},
	_varchar: {
		to: OID._varchar,
		from: [OID._varchar],
		serialize: (value: string | null) =>
			value === null ? null : JSON.stringify(arrayParser<CharacterVarying<number>>(CharacterVarying, ",")(value)?.map(v => v.value)),
		parse: (value: string | null) => arrayParser<CharacterVarying<number>>(CharacterVarying, ",")(value),
	},
	namee: {
		to: OID.name,
		from: [OID.name],
		serialize: (value: string | null) => parser<Name>(Name)(value)?.value ?? null,
		parse: (value: string | null) => parser<Name>(Name)(value),
	},
	_namee: {
		to: OID._name,
		from: [OID._name],
		serialize: (value: string | null) => (value === null ? null : JSON.stringify(arrayParser<Name>(Name, ",")(value)?.map(v => v.value))),
		parse: (value: string | null) => arrayParser<Name>(Name, ",")(value),
	},
	text: {
		to: OID.text,
		from: [OID.text],
		serialize: (value: string | null) => parser<Text>(Text)(value)?.value ?? null,
		parse: (value: string | null) => parser<Text>(Text)(value),
	},
	_text: {
		to: OID._text,
		from: [OID._text],
		serialize: (value: string | null) => (value === null ? null : JSON.stringify(arrayParser<Text>(Text, ",")(value)?.map(v => v.value))),
		parse: (value: string | null) => arrayParser<Text>(Text, ",")(value),
	},
	date: {
		to: OID.date,
		from: [OID.date],
		serialize: (value: string | null) => parser<Date>(Date)(value) ?? null,
		parse: (value: string | null) => parser<Date>(Date)(value),
	},
	_date: {
		to: OID._date,
		from: [OID._date],
		serialize: (value: string | null) => (value === null ? null : JSON.stringify(arrayParser<Date>(Date, ",")(value)?.map(v => v.value))),
		parse: (value: string | null) => arrayParser<Date>(Date, ",")(value),
	},
	datemultirange: {
		to: OID.datemultirange,
		from: [OID.datemultirange],
		serialize: (value: string | null) => parser<DateMultiRange>(DateMultiRange)(value) ?? null,
		parse: (value: string | null) => parser<DateMultiRange>(DateMultiRange)(value),
	},
	_datemultirange: {
		to: OID._datemultirange,
		from: [OID._datemultirange],
		serialize: (value: string | null) => (value === null ? null : JSON.stringify(arrayParser<DateMultiRange>(DateMultiRange)(value)?.map(v => v.value))),
		parse: (value: string | null) => arrayParser<DateMultiRange>(DateMultiRange)(value),
	},
	daterange: {
		to: OID.daterange,
		from: [OID.daterange],
		serialize: (value: string | null) => parser<DateRange>(DateRange)(value) ?? null,
		parse: (value: string | null) => parser<DateRange>(DateRange)(value),
	},
	_daterange: {
		to: OID._daterange,
		from: [OID._daterange],
		serialize: (value: string | null) => (value === null ? null : JSON.stringify(arrayParser<DateRange>(DateRange)(value)?.map(v => v.value))),
		parse: (value: string | null) => arrayParser<DateRange>(DateRange)(value),
	},
	interval: {
		to: OID.interval,
		from: [OID.interval],
		serialize: (value: string | null) => parser<Interval>(Interval)(value) ?? null,
		parse: (value: string | null) => parser<Interval>(Interval)(value),
	},
	_interval: {
		to: OID._interval,
		from: [OID._interval],
		serialize: (value: string | null) => (value === null ? null : JSON.stringify(arrayParser<Interval>(Interval)(value)?.map(v => v.value))),
		parse: (value: string | null) => arrayParser<Interval>(Interval)(value),
	},
	time: {
		to: OID.time,
		from: [OID.time],
		serialize: (value: string | null) => parser<Time>(Time)(value) ?? null,
		parse: (value: string | null) => parser<Time>(Time)(value),
	},
	_time: {
		to: OID._time,
		from: [OID._time],
		serialize: (value: string | null) => (value === null ? null : JSON.stringify(arrayParser<Time>(Time, ",")(value)?.map(v => v.value))),
		parse: (value: string | null) => arrayParser<Time>(Time, ",")(value),
	},
	timestamp: {
		to: OID.timestamp,
		from: [OID.timestamp],
		serialize: (value: string | null) => parser<Timestamp>(Timestamp)(value) ?? null,
		parse: (value: string | null) => parser<Timestamp>(Timestamp)(value),
	},
	_timestamp: {
		to: OID._timestamp,
		from: [OID._timestamp],
		serialize: (value: string | null) => (value === null ? null : JSON.stringify(arrayParser<Timestamp>(Timestamp)(value)?.map(v => v.value))),
		parse: (value: string | null) => arrayParser<Timestamp>(Timestamp)(value),
	},
	tsmultirange: {
		to: OID.tsmultirange,
		from: [OID.tsmultirange],
		serialize: (value: string | null) => parser<TimestampMultiRange>(TimestampMultiRange)(value) ?? null,
		parse: (value: string | null) => parser<TimestampMultiRange>(TimestampMultiRange)(value),
	},
	_tsmultirange: {
		to: OID._tsmultirange,
		from: [OID._tsmultirange],
		serialize: (value: string | null) =>
			value === null ? null : JSON.stringify(arrayParser<TimestampMultiRange>(TimestampMultiRange)(value)?.map(v => v.value)),
		parse: (value: string | null) => arrayParser<TimestampMultiRange>(TimestampMultiRange)(value),
	},
	tsrange: {
		to: OID.tsrange,
		from: [OID.tsrange],
		serialize: (value: string | null) => parser<TimestampRange>(TimestampRange)(value) ?? null,
		parse: (value: string | null) => parser<TimestampRange>(TimestampRange)(value),
	},
	_tsrange: {
		to: OID._tsrange,
		from: [OID._tsrange],
		serialize: (value: string | null) => (value === null ? null : JSON.stringify(arrayParser<TimestampRange>(TimestampRange)(value)?.map(v => v.value))),
		parse: (value: string | null) => arrayParser<TimestampRange>(TimestampRange)(value),
	},
	timestamptz: {
		to: OID.timestamptz,
		from: [OID.timestamptz],
		serialize: (value: string | null) => parser<TimestampTZ>(TimestampTZ)(value) ?? null,
		parse: (value: string | null) => parser<TimestampTZ>(TimestampTZ)(value),
	},
	_timestamptz: {
		to: OID._timestamptz,
		from: [OID._timestamptz],
		serialize: (value: string | null) => (value === null ? null : JSON.stringify(arrayParser<TimestampTZ>(TimestampTZ)(value)?.map(v => v.value))),
		parse: (value: string | null) => arrayParser<TimestampTZ>(TimestampTZ)(value),
	},
	tstzmultirange: {
		to: OID.tstzmultirange,
		from: [OID.tstzmultirange],
		serialize: (value: string | null) => parser<TimestampTZMultiRange>(TimestampTZMultiRange)(value) ?? null,
		parse: (value: string | null) => parser<TimestampTZMultiRange>(TimestampTZMultiRange)(value),
	},
	_tstzmultirange: {
		to: OID._tstzmultirange,
		from: [OID._tstzmultirange],
		serialize: (value: string | null) =>
			value === null ? null : JSON.stringify(arrayParser<TimestampTZMultiRange>(TimestampTZMultiRange)(value)?.map(v => v.value)),
		parse: (value: string | null) => arrayParser<TimestampTZMultiRange>(TimestampTZMultiRange)(value),
	},
	tstzrange: {
		to: OID.tstzrange,
		from: [OID.tstzrange],
		serialize: (value: string | null) => parser<TimestampTZRange>(TimestampTZRange)(value) ?? null,
		parse: (value: string | null) => parser<TimestampTZRange>(TimestampTZRange)(value),
	},
	_tstzrange: {
		to: OID._tstzrange,
		from: [OID._tstzrange],
		serialize: (value: string | null) => (value === null ? null : JSON.stringify(arrayParser<TimestampTZRange>(TimestampTZRange)(value)?.map(v => v.value))),
		parse: (value: string | null) => arrayParser<TimestampTZRange>(TimestampTZRange)(value),
	},
	timetz: {
		to: OID.timetz,
		from: [OID.timetz],
		serialize: (value: string | null) => parser<TimeTZ>(TimeTZ)(value) ?? null,
		parse: (value: string | null) => parser<TimeTZ>(TimeTZ)(value),
	},
	_timetz: {
		to: OID._timetz,
		from: [OID._timetz],
		serialize: (value: string | null) => (value === null ? null : JSON.stringify(arrayParser<TimeTZ>(TimeTZ, ",")(value)?.map(v => v.value))),
		parse: (value: string | null) => arrayParser<TimeTZ>(TimeTZ, ",")(value),
	},
	box: {
		to: OID.box,
		from: [OID.box],
		serialize: (value: string | null) => parser<Box>(Box)(value) ?? null,
		parse: (value: string | null) => parser<Box>(Box)(value),
	},
	_box: {
		to: OID._box,
		from: [OID._box],
		serialize: (value: string | null) => (value === null ? null : JSON.stringify(arrayParser<Box>(Box, ";")(value)?.map(v => v.value))),
		parse: (value: string | null) => arrayParser<Box>(Box, ";")(value),
	},
	circle: {
		to: OID.circle,
		from: [OID.circle],
		serialize: (value: string | null) => parser<Circle>(Circle)(value) ?? null,
		parse: (value: string | null) => parser<Circle>(Circle)(value),
	},
	_circle: {
		to: OID._circle,
		from: [OID._circle],
		serialize: (value: string | null) => (value === null ? null : JSON.stringify(arrayParser<Circle>(Circle)(value)?.map(v => v.value))),
		parse: (value: string | null) => arrayParser<Circle>(Circle)(value),
	},
	line: {
		to: OID.line,
		from: [OID.line],
		serialize: (value: string | null) => parser<Line>(Line)(value) ?? null,
		parse: (value: string | null) => parser<Line>(Line)(value),
	},
	_line: {
		to: OID._line,
		from: [OID._line],
		serialize: (value: string | null) => (value === null ? null : JSON.stringify(arrayParser<Line>(Line)(value)?.map(v => v.value))),
		parse: (value: string | null) => arrayParser<Line>(Line)(value),
	},
	lseg: {
		to: OID.lseg,
		from: [OID.lseg],
		serialize: (value: string | null) => parser<LineSegment>(LineSegment)(value) ?? null,
		parse: (value: string | null) => parser<LineSegment>(LineSegment)(value),
	},
	_lseg: {
		to: OID._lseg,
		from: [OID._lseg],
		serialize: (value: string | null) => (value === null ? null : JSON.stringify(arrayParser<LineSegment>(LineSegment)(value)?.map(v => v.value))),
		parse: (value: string | null) => arrayParser<LineSegment>(LineSegment)(value),
	},
	path: {
		to: OID.path,
		from: [OID.path],
		serialize: (value: string | null) => parser<Path>(Path)(value) ?? null,
		parse: (value: string | null) => parser<Path>(Path)(value),
	},
	_path: {
		to: OID._path,
		from: [OID._path],
		serialize: (value: string | null) => (value === null ? null : JSON.stringify(arrayParser<Path>(Path)(value)?.map(v => v.value))),
		parse: (value: string | null) => arrayParser<Path>(Path)(value),
	},
	point: {
		to: OID.point,
		from: [OID.point],
		serialize: (value: string | null) => parser<Point>(Point)(value) ?? null,
		parse: (value: string | null) => parser<Point>(Point)(value),
	},
	_point: {
		to: OID._point,
		from: [OID._point],
		serialize: (value: string | null) => (value === null ? null : JSON.stringify(arrayParser<Point>(Point)(value)?.map(v => v.value))),
		parse: (value: string | null) => arrayParser<Point>(Point)(value),
	},
	polygon: {
		to: OID.polygon,
		from: [OID.polygon],
		serialize: (value: string | null) => parser<Polygon>(Polygon)(value) ?? null,
		parse: (value: string | null) => parser<Polygon>(Polygon)(value),
	},
	_polygon: {
		to: OID._polygon,
		from: [OID._polygon],
		serialize: (value: string | null) => (value === null ? null : JSON.stringify(arrayParser<Polygon>(Polygon)(value)?.map(v => v.value))),
		parse: (value: string | null) => arrayParser<Polygon>(Polygon)(value),
	},
	money: {
		to: OID.money,
		from: [OID.money],
		serialize: (value: string | null) => parser<Money>(Money)(value) ?? null,
		parse: (value: string | null) => parser<Money>(Money)(value),
	},
	_money: {
		to: OID._money,
		from: [OID._money],
		serialize: (value: string | null) => (value === null ? null : JSON.stringify(arrayParser<Money>(Money, ",")(value)?.map(v => v.value))),
		parse: (value: string | null) => arrayParser<Money>(Money, ",")(value),
	},
	float4: {
		to: OID.float4,
		from: [OID.float4],
		serialize: (value: string | null) => parser<Float4>(Float4)(value) ?? null,

		parse: (value: string | null) => parser<Float4>(Float4)(value),
	},
	_float4: {
		to: OID._float4,
		from: [OID._float4],
		serialize: (value: string | null) => (value === null ? null : JSON.stringify(arrayParser<Float4>(Float4, ",")(value)?.map(v => v.value))),
		parse: (value: string | null) => arrayParser<Float4>(Float4, ",")(value),
	},
	float8: {
		to: OID.float8,
		from: [OID.float8],
		serialize: (value: string | null) => parser<Float8>(Float8)(value) ?? null,
		parse: (value: string | null) => parser<Float8>(Float8)(value),
	},
	_float8: {
		to: OID._float8,
		from: [OID._float8],
		serialize: (value: string | null) => (value === null ? null : JSON.stringify(arrayParser<Float8>(Float8, ",")(value)?.map(v => v.value))),
		parse: (value: string | null) => arrayParser<Float8>(Float8, ",")(value),
	},
	int2: {
		to: OID.int2,
		from: [OID.int2],
		serialize: (value: string | null) => parser<Int2>(Int2)(value) ?? null,
		parse: (value: string | null) => parser<Int2>(Int2)(value),
	},
	_int2: {
		to: OID._int2,
		from: [OID._int2],
		serialize: (value: string | null) => (value === null ? null : JSON.stringify(arrayParser<Int2>(Int2, ",")(value)?.map(v => v.value))),
		parse: (value: string | null) => arrayParser<Int2>(Int2, ",")(value),
	},
	int4: {
		to: OID.int4,
		from: [OID.int4],
		serialize: (value: string | null) => parser<Int4>(Int4)(value) ?? null,
		parse: (value: string | null) => parser<Int4>(Int4)(value),
	},
	_int4: {
		to: OID._int4,
		from: [OID._int4],
		serialize: (value: string | null) => (value === null ? null : JSON.stringify(arrayParser<Int4>(Int4, ",")(value)?.map(v => v.value))),
		parse: (value: string | null) => arrayParser<Int4>(Int4, ",")(value),
	},
	int4multirange: {
		to: OID.int4multirange,
		from: [OID.int4multirange],
		serialize: (value: string | null) => parser<Int4MultiRange>(Int4MultiRange)(value) ?? null,
		parse: (value: string | null) => parser<Int4MultiRange>(Int4MultiRange)(value),
	},
	_int4multirange: {
		to: OID._int4multirange,
		from: [OID._int4multirange],
		serialize: (value: string | null) => (value === null ? null : JSON.stringify(arrayParser<Int4MultiRange>(Int4MultiRange)(value)?.map(v => v.value))),
		parse: (value: string | null) => arrayParser<Int4MultiRange>(Int4MultiRange)(value),
	},
	int4range: {
		to: OID.int4range,
		from: [OID.int4range],
		serialize: (value: string | null) => parser<Int4Range>(Int4Range)(value) ?? null,
		parse: (value: string | null) => parser<Int4Range>(Int4Range)(value),
	},
	_int4range: {
		to: OID._int4range,
		from: [OID._int4range],
		serialize: (value: string | null) => (value === null ? null : JSON.stringify(arrayParser<Int4Range>(Int4Range)(value)?.map(v => v.value))),
		parse: (value: string | null) => arrayParser<Int4Range>(Int4Range)(value),
	},
	int8: {
		to: OID.int8,
		from: [OID.int8],
		serialize: (value: string | null) => parser<Int8>(Int8)(value) ?? null,
		parse: (value: string | null) => parser<Int8>(Int8)(value),
	},
	_int8: {
		to: OID._int8,
		from: [OID._int8],
		serialize: (value: string | null) => (value === null ? null : JSON.stringify(arrayParser<Int8>(Int8, ",")(value)?.map(v => v.value))),
		parse: (value: string | null) => arrayParser<Int8>(Int8, ",")(value),
	},
	int8multirange: {
		to: OID.int8multirange,
		from: [OID.int8multirange],
		serialize: (value: string | null) => parser<Int8MultiRange>(Int8MultiRange)(value) ?? null,
		parse: (value: string | null) => parser<Int8MultiRange>(Int8MultiRange)(value),
	},
	_int8multirange: {
		to: OID._int8multirange,
		from: [OID._int8multirange],
		serialize: (value: string | null) => (value === null ? null : JSON.stringify(arrayParser<Int8MultiRange>(Int8MultiRange)(value)?.map(v => v.value))),
		parse: (value: string | null) => arrayParser<Int8MultiRange>(Int8MultiRange)(value),
	},
	int8range: {
		to: OID.int8range,
		from: [OID.int8range],
		serialize: (value: string | null) => parser<Int8Range>(Int8Range)(value) ?? null,
		parse: (value: string | null) => parser<Int8Range>(Int8Range)(value),
	},
	_int8range: {
		to: OID._int8range,
		from: [OID._int8range],
		serialize: (value: string | null) => (value === null ? null : JSON.stringify(arrayParser<Int8Range>(Int8Range)(value)?.map(v => v.value))),
		parse: (value: string | null) => arrayParser<Int8Range>(Int8Range)(value),
	},
	oid: {
		to: OID.oid,
		from: [OID.oid],
		serialize: (value: string | null) => parser<OIDClass>(OIDClass)(value) ?? null,
		parse: (value: string | null) => parser<OIDClass>(OIDClass)(value),
	},
	_oid: {
		to: OID._oid,
		from: [OID._oid],
		serialize: (value: string | null) => (value === null ? null : JSON.stringify(arrayParser<OIDClass>(OIDClass, ",")(value)?.map(v => v.value))),
		parse: (value: string | null) => arrayParser<OIDClass>(OIDClass, ",")(value),
	},
	uuid: {
		to: OID.uuid,
		from: [OID.uuid],
		serialize: (value: string | null) => parser<UUID>(UUID)(value) ?? null,
		parse: (value: string | null) => parser<UUID>(UUID)(value),
	},
	_uuid: {
		to: OID._uuid,
		from: [OID._uuid],
		serialize: (value: string | null) => (value === null ? null : JSON.stringify(arrayParser<UUID>(UUID, ",")(value)?.map(v => v.value))),
		parse: (value: string | null) => arrayParser<UUID>(UUID, ",")(value),
	},
};
