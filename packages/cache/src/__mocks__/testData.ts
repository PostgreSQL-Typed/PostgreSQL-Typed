import { PgInsertValue, table } from "@postgresql-typed/core";
import {
	defineBit,
	defineBitVarying,
	defineBoolean,
	defineBox,
	defineByteA,
	defineCharacter,
	defineCharacterVarying,
	defineCircle,
	defineDate,
	defineEnum,
	defineFloat4,
	defineFloat8,
	defineInt2,
	defineInt4,
	defineInt8,
	defineInterval,
	defineJSON,
	defineLine,
	defineLineSegment,
	defineMoney,
	defineName,
	defineOID,
	definePath,
	definePoint,
	definePolygon,
	defineText,
	defineTime,
	defineTimestamp,
	defineTimestampTZ,
	defineTimeTZ,
	defineUUID,
} from "@postgresql-typed/core/definers";

export const TestTable = table("cache_testing", {
	_bit: defineBit("_bit", { length: 1 }).array().notNull(),
	_bool: defineBoolean("_bool").array().notNull(),
	_box: defineBox("_box").array().notNull(),
	_bytea: defineByteA("_bytea").array().notNull(),
	_char: defineCharacter("_char", { length: 1 }).array().notNull(),
	_circle: defineCircle("_circle").array().notNull(),
	_date: defineDate("_date", {
		mode: "string",
	})
		.array()
		.notNull(),
	_enum: defineEnum("_enum", {
		enumName: "mood",
		enumValues: ["sad", "ok", "happy"],
	})
		.array()
		.notNull(),
	_float4: defineFloat4("_float4").array().notNull(),
	_float8: defineFloat8("_float8").array().notNull(),
	_int2: defineInt2("_int2").array().notNull(),
	_int4: defineInt4("_int4").array().notNull(),
	_int8: defineInt8("_int8").array().notNull(),
	_interval: defineInterval("_interval").array().notNull(),
	_json: defineJSON("_json", { mode: "string" }).array().notNull(),
	_jsonb: defineJSON("_jsonb", { mode: "string" }).array().notNull(),
	_line: defineLine("_line").array().notNull(),
	_lseg: defineLineSegment("_lseg").array().notNull(),
	_money: defineMoney("_money").array().notNull(),
	_name: defineName("_name").array().notNull(),
	_oid: defineOID("_oid").array().notNull(),
	_path: definePath("_path").array().notNull(),
	_point: definePoint("_point").array().notNull(),
	_polygon: definePolygon("_polygon").array().notNull(),
	_text: defineText("_text", { mode: "string" }).array().notNull(),
	_time: defineTime("_time", { mode: "string" }).array().notNull(),
	_timestamp: defineTimestamp("_timestamp", { mode: "string" }).array().notNull(),
	_timestamptz: defineTimestampTZ("_timestamptz", { mode: "string" }).array().notNull(),
	_timetz: defineTimeTZ("_timetz", { mode: "string" }).array().notNull(),
	_uuid: defineUUID("_uuid").array().notNull(),
	_varbit: defineBitVarying("_varbit", { length: 1 }).array().notNull(),
	_varchar: defineCharacterVarying("_varchar", { length: 1 }).array().notNull(),
	bit: defineBit("bit", { length: 1 }).notNull(),
	bool: defineBoolean("bool").notNull(),
	box: defineBox("box").notNull(),
	bytea: defineByteA("bytea").notNull(),
	char: defineCharacter("char", { length: 1 }).notNull(),
	circle: defineCircle("circle").notNull(),
	date: defineDate("date", { mode: "string" }).notNull(),
	enum: defineEnum("enum", {
		enumName: "mood",
		enumValues: ["sad", "ok", "happy"],
	}).notNull(),
	float4: defineFloat4("float4").notNull(),
	float8: defineFloat8("float8").notNull(),
	int2: defineInt2("int2").notNull(),
	int4: defineInt4("int4").notNull(),
	int8: defineInt8("int8").notNull(),
	interval: defineInterval("interval").notNull(),
	json: defineJSON("json", { mode: "string" }).notNull(),
	jsonb: defineJSON("jsonb", { mode: "string" }).notNull(),
	line: defineLine("line").notNull(),
	lseg: defineLineSegment("lseg").notNull(),
	money: defineMoney("money").notNull(),
	name: defineName("name").notNull(),
	oid: defineOID("oid").notNull(),
	path: definePath("path").notNull(),
	point: definePoint("point").notNull(),
	polygon: definePolygon("polygon").notNull(),
	text: defineText("text", { mode: "string" }).notNull(),
	time: defineTime("time", { mode: "string" }).notNull(),
	timestamp: defineTimestamp("timestamp", { mode: "string" }).notNull(),
	timestamptz: defineTimestampTZ("timestamptz", { mode: "string" }).notNull(),
	timetz: defineTimeTZ("timetz", { mode: "string" }).notNull(),
	uuid: defineUUID("uuid").notNull(),
	varbit: defineBitVarying("varbit", { length: 1 }).notNull(),
	varchar: defineCharacterVarying("varchar", { length: 1 }).notNull(),
});

export const createTable = `
DROP TYPE IF EXISTS mood;
CREATE TYPE mood as ENUM ('sad', 'ok', 'happy');
CREATE TABLE IF NOT EXISTS cache_testing (
	bytea BYTEA NOT NULL,
	_bytea BYTEA[] NOT NULL,
  bit BIT(1) NOT NULL,
  _bit BIT(1)[] NOT NULL,
  varbit BIT VARYING(1) NOT NULL,
  _varbit BIT VARYING(1)[] NOT NULL,
  bool BOOLEAN NOT NULL,
  _bool BOOLEAN[] NOT NULL,
  box BOX NOT NULL,
  _box BOX[] NOT NULL,
  char CHAR(1) NOT NULL,
  _char CHAR(1)[] NOT NULL,
  varchar CHARACTER VARYING(1) NOT NULL,
  _varchar CHARACTER VARYING(1)[] NOT NULL,
  circle CIRCLE NOT NULL,
  _circle CIRCLE[] NOT NULL,
  date DATE NOT NULL,
  _date DATE[] NOT NULL,
	enum mood NOT NULL,
	_enum mood[] NOT NULL,
  float4 FLOAT4 NOT NULL,
  _float4 FLOAT4[] NOT NULL,
  float8 FLOAT8 NOT NULL,
  _float8 FLOAT8[] NOT NULL,
  int2 INT2 NOT NULL,
  _int2 INT2[] NOT NULL,
  int4 INT4 NOT NULL,
  _int4 INT4[] NOT NULL,
  int8 INT8 NOT NULL,
  _int8 INT8[] NOT NULL,
  interval INTERVAL NOT NULL,
  _interval INTERVAL[] NOT NULL,
  line LINE NOT NULL,
  _line LINE[] NOT NULL,
  lseg LSEG NOT NULL,
  _lseg LSEG[] NOT NULL,
	json JSON NOT NULL,
	_json JSON[] NOT NULL,
	jsonb JSONB NOT NULL,
	_jsonb JSONB[] NOT NULL,
  money MONEY NOT NULL,
  _money MONEY[] NOT NULL,
  name NAME NOT NULL,
  _name NAME[] NOT NULL,
  oid OID NOT NULL,
  _oid OID[] NOT NULL,
  path PATH NOT NULL,
  _path PATH[] NOT NULL,
  point POINT NOT NULL,
  _point POINT[] NOT NULL,
  polygon POLYGON NOT NULL,
  _polygon POLYGON[] NOT NULL,
  text TEXT NOT NULL,
  _text TEXT[] NOT NULL,
  time TIME NOT NULL,
  _time TIME[] NOT NULL,
  timestamp TIMESTAMP NOT NULL,
  _timestamp TIMESTAMP[] NOT NULL,
  timestamptz TIMESTAMPTZ NOT NULL,
  _timestamptz TIMESTAMPTZ[] NOT NULL,
  timetz TIMETZ NOT NULL,
  _timetz TIMETZ[] NOT NULL,
  uuid UUID NOT NULL,
  _uuid UUID[] NOT NULL
);`;

export const dropTable = `
DROP TABLE IF EXISTS cache_testing;
DROP TYPE IF EXISTS mood;
`;

export const insertQuery: PgInsertValue<typeof TestTable> = {
	_bit: ["1", "0"],
	_bool: [true, false],
	_box: ["((0,0),(1,1))", "((0,0),(1,1))"],
	_bytea: [Buffer.from("hello"), Buffer.from("world")],
	_char: ["a", "b"],
	_circle: ["<(0,0),1>", "<(0,0),1>"],
	_date: ["2020-01-01", "2020-01-02"],
	_enum: ["ok", "happy"],
	_float4: [1.1, 2.2],
	_float8: [1.1, 2.2],
	_int2: [1, 2],
	_int4: [1, 2],
	_int8: [1, 2],
	_interval: ["1 day", "2 days"],
	_json: ['{ "foo": "bar" }', '{ "foo": "bar" }'],
	_jsonb: ['{ "foo": "bar" }', '{ "foo": "bar" }'],
	_line: ["{1.1,2.2,3.3}", "{1.1,2.2,3.3}"],
	_lseg: ["[(0,0),(1,1)]", "[(0,0),(1,1)]"],
	_money: [1.1, 2.2],
	_name: ["a", "b"],
	_oid: [1, 2],
	_path: ["((0,0),(1,1))", "((0,0),(1,1))"],
	_point: ["(0,0)", "(0,0)"],
	_polygon: ["((0,0),(1,1))", "((0,0),(1,1))"],
	_text: ["a", "b"],
	_time: ["00:00:00", "00:00:01"],
	_timestamp: ["2020-01-01 00:00:00", "2020-01-01 00:00:01"],
	_timestamptz: ["2020-01-01 00:00:00", "2020-01-01 00:00:01"],
	_timetz: ["00:00:00", "00:00:01"],
	_uuid: ["a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11", "a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a12"],
	_varbit: ["1", "0"],
	_varchar: ["a", "b"],
	bit: "1",
	bool: true,
	box: "((0,0),(1,1))",
	bytea: Buffer.from("hello"),
	char: "a",
	circle: "<(0,0),1>",
	date: "2020-01-01",
	enum: "sad",
	float4: 1.1,
	float8: 1.1,
	int2: 1,
	int4: 1,
	int8: 1,
	interval: "1 day",
	json: '{ "foo": "bar" }',
	jsonb: '{ "foo": "bar" }',
	line: "{1.1,2.2,3.3}",
	lseg: "[(0,0),(1,1)]",
	money: 1.1,
	name: "a",
	oid: 1,
	path: "((0,0),(1,1))",
	point: "(0,0)",
	polygon: "((0,0),(1,1))",
	text: "a",
	time: "00:00:00",
	timestamp: "2020-01-01 00:00:00",
	timestamptz: "2020-01-01 00:00:00",
	timetz: "00:00:00",
	uuid: "a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11",
	varbit: "1",
	varchar: "a",
};

export const selectQuery = `
SELECT * FROM cache_testing
WHERE uuid = $1
`;

export const selectQueryValues = ["a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11"];
